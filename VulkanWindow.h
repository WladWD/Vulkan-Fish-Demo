#include "VulkanEngine.h"
#include "VulkanDevice.h"
#include "VulkanSwapchain.h"
#include "VulkanFramebuffer.h"
#include "VulkanDebug.h"
#include "VulkanInfo.h"
#include "VulkanCommand.h"
#include <iostream>
#pragma once

namespace VulkanEngineApplication 
{
	class VulkanWindow 
	{
		/////////////////////////////////////////////////////////////////////////////////////
		//Validation Layer and Extension
		std::vector<const char *> instanceValidationLayer = {
			"VK_LAYER_LUNARG_standard_validation"
			//"VK_LAYER_NV_nsight"//VK_LAYER_LUNARG_api_dump"
		};

		std::vector<const char *> instanceExtension = {
			VK_KHR_SURFACE_EXTENSION_NAME
		};

#ifdef _DEBUG
		const bool enableInstanceValidationLayer = true;
#else
		const bool enableInstanceValidationLayer = false;
#endif		
		/////////////////////////////////////////////////////////////////////////////////////
		VulkanDevice *device;
		VulkanSwapchain *swapchain;
		VulkanFramebuffer *framebuffer;
		VulkanCommand *command;
		VulkanDebug *debug;
		VulkanInfo *info;
		/////////////////////////////////////////////////////////////////////////////////////
		VulkanEngineApplication::VulkanData vulkanData;
		/////////////////////////////////////////////////////////////////////////////////////
		Engine::VulkanEngine *engine;	
		/////////////////////////////////////////////////////////////////////////////////////
		void initVulkan(void);
		void initDebug(void);
		bool checkValidationSupport(void);
		void createSemaphore(void);
		/////////////////////////////////////////////////////////////////////////////////////
	public:
		VulkanWindow(void);
		~VulkanWindow();
		/////////////////////////////////////////////////////////////////////////////////////
		void createInstance(void);
		void initialize(const Asset::AssetLoader *assetLoader);
		void addInstanceRequiredExtension(const char *extensionName);
		/////////////////////////////////////////////////////////////////////////////////////
		const VulkanEngineApplication::VulkanData *getVulkanData();
		/////////////////////////////////////////////////////////////////////////////////////
		void resize(void);
		/////////////////////////////////////////////////////////////////////////////////////
		void pause(void);
		void resume(void);
		/////////////////////////////////////////////////////////////////////////////////////
		void draw(void);
		/////////////////////////////////////////////////////////////////////////////////////
	};
}

